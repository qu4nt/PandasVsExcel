<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js"></script>
<script>
(function() {
  function addWidgetsRenderer() {
    var requireJsScript = document.createElement('script');
    requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js';

    var mimeElement = document.querySelector('script[type="application/vnd.jupyter.widget-view+json"]');
    var jupyterWidgetsScript = document.createElement('script');
    var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js';
    var widgetState;

    // Fallback for older version:
    try {
      widgetState = mimeElement && JSON.parse(mimeElement.innerHTML);

      if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) {
        widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js';
      }
    } catch(e) {}

    jupyterWidgetsScript.src = widgetRendererSrc;

    document.body.appendChild(requireJsScript);
    document.body.appendChild(jupyterWidgetsScript);
  }

  document.addEventListener('DOMContentLoaded', addWidgetsRenderer);
}());
</script>

<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
!!! question "¿Qué son las estructuras de datos? Selecciona la opción correcta."

    a. Variables que no permiten acceder a los datos.

    b. Conjuntos de datos almacenados en un objeto.

    c. Datos desordenados

    d. Conjuntos de datos que permiten un único tipo de datos.

??? success "Respuesta"

    b. Conjuntos de datos almacenados en un objeto.
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
!!! question "Sobre los arrays (arreglos). Escoge la(s) opción(es) correcta(s)."

    1. Son estructuras de datos.
    2. Pueden ser numéricos o no.
    3. Los valores deben ser del mismo tipo.
    4. Puedes crear arrays con el módulo array o con Numpy.

</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
??? success "Respuesta"

    Las opciones correctas sobre los arrays son:
    1. Son estructuras de datos
    3. Los valores deben ser del mismo tipo (especialmente para arrays creados con el módulo array)
    4. Puedes crear arrays con el módulo array o con Numpy.
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
!!! question "Almacena la siguiente información en una variable, con el nombre que desees. Una vez hecho lo anterior, accede a los elementos desde la segunda posición, luego guárdalos en una variable y conviértelo en un array"

    ```py
        [['name', 'age', 'sex'],
        ['Kylie', 25, 'F'],
        ['Kanye', 45, 'M'],
        ['Roger', 41, 'M'],
        ['Cristiano', 37,'M'],
        ['Lionel', 35, 'M']]
    ```
    **¿De qué tipo es la variable que almacenaste al inicio?**
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
??? success "Respuesta"

    En este caso se almacena la lista en una variable cuyo nombre es tarea.

    ```py
    tarea = [['name', 'age', 'sex'],
        ['Kylie', 25, 'F'],
        ['Kanye', 45, 'M'],
        ['Roger', 41, 'M'],
        ['Cristiano', 37,'M'],
        ['Lionel', 35, 'M']]
    ```
    Para obtener los elementos desde la segunda posición debemos tener en cuenta que Python comienza enumerando las posiciones desde el 0, entonces en este caso obtenerlos debemos acceder desde el valor en la posición número 1.

    ```py
    tarea[1:]
    ```
    ```py
    [['Kylie', 25, 'F'],
    ['Kanye', 45, 'M'],
    ['Roger', 41, 'M'],
    ['Cristiano', 37,'M'],
    ['Lionel', 35, 'M']]

    ```

    Ahora, para almacenar esto en una variable cuyo tipo sea array debemos utilizar la biblioteca Numpy.

    ```py
    import numpy as np

    arr = np.array(tarea[1:])
    arr
    ``` 
    
    `array(['Cristiano', '37', 'M'], dtype='<U9')`
    

    - La variable almacenada al inicio es de tipo list (una lista). Recuerda que puedes comprobar el tipo utilizando la función `type`.
        ```py
        type(tarea)
        ```
        `list`
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
!!! question "Utilizando la variable (de tipo `list`) y el _array_ que almacenaste en el apartado anterior crea un DataFrame de _pandas_."
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
??? success "Respuesta"

    Debemos importar la biblioteca pandas

    ```py

    import pandas as pd

    df = pd.DataFrame(tarea[1:], columns=tarea[0] )
    df
    ```

    El resultado es 

    | |name|age|sex|
    |:----|:----|:----|:----|
    |0|Kylie|25|F|
    |1|Kanye|45|M|
    |2|Roger|41|M|
    |3|Cristiano|37|M|
    |4|Lionel|35|M|
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
!!! question "Para el DataFrame que creaste anteriormente, selecciona la columna 'age', almacena esto en una variable y luego aplica la función dtype. ¿De qué tipo es la variable que almacenaste?"
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
??? success "Respuesta"

    Puedes seleccionar la columna a partir de distintas formas
    
    1. ```py
        columna = df.age
       ```
    2. ```py
        columna = df['age']
       ```
    3. ```py
       columna = df.loc[:,'age']
       ```
    4. ```py
       columna = df.iloc[:, 1]
       ```
   
    ¿Cuál forma escogiste? _Déjanos tu respuesta en los comentarios._

    Ahora, el tipo de variable es una serie de pandas, nos aseguramos de ello a partir de la función type.

    ```py
    type(columna)
    ```
    `pandas.core.series.Series`

    !!! tip "Recuerda que las columnas de un DataFrame de pandas son Series"
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
!!! question "Para el siguiente DataFrame, que almacena 10 valores de la [lista de países ordenados por el consumo anual de leche per cápita, excluyendo la mantequilla](https://en.wikipedia.org/wiki/List_of_countries_by_milk_consumption_per_capita), aplica las funciones suma, máximo y mínimo, de forma que obtengas:"

    1. La cantidad total de leche por año.
    2. La cantidad total de leche consumida para cada país.
    3. La cantidad máxima de leche y la mínima por año
    4. La cantidad máxima y mínima de leche por país. 

    ```py
    df = pd.DataFrame(
        data=[
            [430.76, 361.19],
            [349.21, 305.87],
            [341.47, 320.15],
            [341.23, 355.86],
            [318.69, 315.78],
            [303.72, 277.52],
            [295.46, 273.87],
            [291.86, 247.17],
            [288.12, 262.61],
            [284.85, 238.86],
        ],
        columns=[
            "Milk consumption 2013 (kg/capita/yr)",
            "Milk consumption 2007 (kg/capita/yr)",
        ],
        index=[
            " Finland ",
            " Montenegro ",
            " Netherlands ",
            " Sweden ",
            "  Switzerland ",
            " Albania ",
            " Lithuania ",
            " Ireland ",
            " Kazakhstan ",
            " Estonia ",
        ],
    )
    ```
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
??? success "Respuesta"

    1. La cantidad total de leche por año se puede calcular a partir de 
        ```py
        df.sum()
        ```
        Obtendrás:
        ```
        Milk consumption 2013 (kg/capita/yr)    3245.37
        Milk consumption 2007 (kg/capita/yr)    2958.88
        dtype: float64
        ```
    1. La cantidad total de leche consumida para cada país.
    
    ```py
    df.sum(axis=1)
    ```
    
    ```
      Finland          791.95
      Montenegro       655.08
      Netherlands      661.62
      Sweden           697.09
      Switzerland     634.47
      Albania          581.24
      Lithuania        569.33
      Ireland          539.03
      Kazakhstan       550.73
      Estonia          523.71
     dtype: float64
    ```
    1. La cantidad máxima de leche y la mínima por año
    
    ```py
    df.max()
    ```
    ```
    Milk consumption 2013 (kg/capita/yr)    430.76
    Milk consumption 2007 (kg/capita/yr)    361.19
    dtype: float64
    ```
   
    ```py
    df.min()
    ```
    ```
    Milk consumption 2013 (kg/capita/yr)    284.85
    Milk consumption 2007 (kg/capita/yr)    238.86
    dtype: float64
    ```
    1. La cantidad máxima y mínima de leche por país
    
    ```py
    df.max(axis=1)
    ```
    ```
     Finland          430.76
     Montenegro       349.21
     Netherlands      341.47
     Sweden           355.86
     Switzerland     318.69
     Albania          303.72
     Lithuania        295.46
     Ireland          291.86
     Kazakhstan       288.12
     Estonia          284.85
    dtype: float64
    ```
    
    ```py
    df.min(axis=1)
    ```
    ```
     Finland          361.19
     Montenegro       305.87
     Netherlands      320.15
     Sweden           341.23
     Switzerland      315.78
     Albania          277.52
     Lithuania        273.87
     Ireland          247.17
     Kazakhstan       262.61
     Estonia          238.86
    dtype: float64
    ```
</div>
</div>
</div>


<script type="application/vnd.jupyter.widget-state+json">
{"state": {}, "version_major": 2, "version_minor": 0}
</script>

